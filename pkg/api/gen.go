//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BirthDate Дата рождения
type BirthDate = openapi_types.Date

// DialogMessage defines model for DialogMessage.
type DialogMessage struct {
	// From Идентификатор пользователя
	From UserId `json:"from"`

	// Text Текст сообщения
	Text DialogMessageText `json:"text"`

	// To Идентификатор пользователя
	To UserId `json:"to"`
}

// DialogMessageText Текст сообщения
type DialogMessageText = string

// Post Пост пользователя
type Post struct {
	// AuthorUserId Идентификатор пользователя
	AuthorUserId *UserId `json:"author_user_id,omitempty"`

	// Id Идентификатор поста
	Id *PostId `json:"id,omitempty"`

	// Text Текст поста
	Text *PostText `json:"text,omitempty"`
}

// PostId Идентификатор поста
type PostId = string

// PostText Текст поста
type PostText = string

// User defines model for User.
type User struct {
	// Biography Интересы
	Biography *string `json:"biography,omitempty"`

	// Birthdate Дата рождения
	Birthdate *BirthDate `json:"birthdate,omitempty"`

	// City Город
	City *string `json:"city,omitempty"`

	// FirstName Имя
	FirstName *string `json:"first_name,omitempty"`

	// Id Идентификатор пользователя
	Id *UserId `json:"id,omitempty"`

	// SecondName Фамилия
	SecondName *string `json:"second_name,omitempty"`
}

// UserId Идентификатор пользователя
type UserId = string

// N5xx defines model for 5xx.
type N5xx struct {
	// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
	Code *int `json:"code,omitempty"`

	// Message Описание ошибки
	Message string `json:"message"`

	// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
	RequestId *string `json:"request_id,omitempty"`
}

// PostDialogUserIdSendJSONBody defines parameters for PostDialogUserIdSend.
type PostDialogUserIdSendJSONBody struct {
	// Text Текст сообщения
	Text DialogMessageText `json:"text"`
}

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {
	// Id Идентификатор пользователя
	Id       *UserId `json:"id,omitempty"`
	Password *string `json:"password,omitempty"`
}

// PostPostCreateJSONBody defines parameters for PostPostCreate.
type PostPostCreateJSONBody struct {
	// Text Текст поста
	Text PostText `json:"text"`
}

// GetPostFeedParams defines parameters for GetPostFeed.
type GetPostFeedParams struct {
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *float32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// PutPostUpdateJSONBody defines parameters for PutPostUpdate.
type PutPostUpdateJSONBody struct {
	// Id Идентификатор поста
	Id PostId `json:"id"`

	// Text Текст поста
	Text PostText `json:"text"`
}

// PostUserRegisterJSONBody defines parameters for PostUserRegister.
type PostUserRegisterJSONBody struct {
	Biography *string `json:"biography,omitempty"`

	// Birthdate Дата рождения
	Birthdate  *BirthDate `json:"birthdate,omitempty"`
	City       *string    `json:"city,omitempty"`
	FirstName  *string    `json:"first_name,omitempty"`
	Password   *string    `json:"password,omitempty"`
	SecondName *string    `json:"second_name,omitempty"`
}

// GetUserSearchParams defines parameters for GetUserSearch.
type GetUserSearchParams struct {
	// FirstName Условие поиска по имени
	FirstName string `form:"first_name" json:"first_name"`

	// LastName Условие поиска по фамилии
	LastName string `form:"last_name" json:"last_name"`
}

// PostDialogUserIdSendJSONRequestBody defines body for PostDialogUserIdSend for application/json ContentType.
type PostDialogUserIdSendJSONRequestBody PostDialogUserIdSendJSONBody

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// PostPostCreateJSONRequestBody defines body for PostPostCreate for application/json ContentType.
type PostPostCreateJSONRequestBody PostPostCreateJSONBody

// PutPostUpdateJSONRequestBody defines body for PutPostUpdate for application/json ContentType.
type PutPostUpdateJSONRequestBody PutPostUpdateJSONBody

// PostUserRegisterJSONRequestBody defines body for PostUserRegister for application/json ContentType.
type PostUserRegisterJSONRequestBody PostUserRegisterJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dialog/{user_id}/list)
	GetDialogUserIdList(w http.ResponseWriter, r *http.Request, userId UserId)

	// (POST /dialog/{user_id}/send)
	PostDialogUserIdSend(w http.ResponseWriter, r *http.Request, userId UserId)

	// (PUT /friend/delete/{user_id})
	PutFriendDeleteUserId(w http.ResponseWriter, r *http.Request, userId UserId)

	// (PUT /friend/set/{user_id})
	PutFriendSetUserId(w http.ResponseWriter, r *http.Request, userId UserId)

	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)

	// (POST /post/create)
	PostPostCreate(w http.ResponseWriter, r *http.Request)

	// (PUT /post/delete/{id})
	PutPostDeleteId(w http.ResponseWriter, r *http.Request, id PostId)

	// (GET /post/feed)
	GetPostFeed(w http.ResponseWriter, r *http.Request, params GetPostFeedParams)

	// (GET /post/get/{id})
	GetPostGetId(w http.ResponseWriter, r *http.Request, id PostId)

	// (PUT /post/update)
	PutPostUpdate(w http.ResponseWriter, r *http.Request)

	// (GET /user/get/{id})
	GetUserGetId(w http.ResponseWriter, r *http.Request, id UserId)

	// (POST /user/register)
	PostUserRegister(w http.ResponseWriter, r *http.Request)

	// (GET /user/search)
	GetUserSearch(w http.ResponseWriter, r *http.Request, params GetUserSearchParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDialogUserIdList operation middleware
func (siw *ServerInterfaceWrapper) GetDialogUserIdList(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", r.PathValue("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDialogUserIdList(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostDialogUserIdSend operation middleware
func (siw *ServerInterfaceWrapper) PostDialogUserIdSend(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", r.PathValue("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDialogUserIdSend(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutFriendDeleteUserId operation middleware
func (siw *ServerInterfaceWrapper) PutFriendDeleteUserId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", r.PathValue("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutFriendDeleteUserId(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutFriendSetUserId operation middleware
func (siw *ServerInterfaceWrapper) PutFriendSetUserId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", r.PathValue("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutFriendSetUserId(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostPostCreate operation middleware
func (siw *ServerInterfaceWrapper) PostPostCreate(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPostCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutPostDeleteId operation middleware
func (siw *ServerInterfaceWrapper) PutPostDeleteId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id PostId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutPostDeleteId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPostFeed operation middleware
func (siw *ServerInterfaceWrapper) GetPostFeed(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostFeedParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostFeed(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPostGetId operation middleware
func (siw *ServerInterfaceWrapper) GetPostGetId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id PostId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostGetId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutPostUpdate operation middleware
func (siw *ServerInterfaceWrapper) PutPostUpdate(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutPostUpdate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserGetId operation middleware
func (siw *ServerInterfaceWrapper) GetUserGetId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserGetId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUserRegister operation middleware
func (siw *ServerInterfaceWrapper) PostUserRegister(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserSearch operation middleware
func (siw *ServerInterfaceWrapper) GetUserSearch(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserSearchParams

	// ------------- Required query parameter "first_name" -------------

	if paramValue := r.URL.Query().Get("first_name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "first_name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "first_name", r.URL.Query(), &params.FirstName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "first_name", Err: err})
		return
	}

	// ------------- Required query parameter "last_name" -------------

	if paramValue := r.URL.Query().Get("last_name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "last_name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "last_name", r.URL.Query(), &params.LastName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "last_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserSearch(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/dialog/{user_id}/list", wrapper.GetDialogUserIdList)
	m.HandleFunc("POST "+options.BaseURL+"/dialog/{user_id}/send", wrapper.PostDialogUserIdSend)
	m.HandleFunc("PUT "+options.BaseURL+"/friend/delete/{user_id}", wrapper.PutFriendDeleteUserId)
	m.HandleFunc("PUT "+options.BaseURL+"/friend/set/{user_id}", wrapper.PutFriendSetUserId)
	m.HandleFunc("POST "+options.BaseURL+"/login", wrapper.PostLogin)
	m.HandleFunc("POST "+options.BaseURL+"/post/create", wrapper.PostPostCreate)
	m.HandleFunc("PUT "+options.BaseURL+"/post/delete/{id}", wrapper.PutPostDeleteId)
	m.HandleFunc("GET "+options.BaseURL+"/post/feed", wrapper.GetPostFeed)
	m.HandleFunc("GET "+options.BaseURL+"/post/get/{id}", wrapper.GetPostGetId)
	m.HandleFunc("PUT "+options.BaseURL+"/post/update", wrapper.PutPostUpdate)
	m.HandleFunc("GET "+options.BaseURL+"/user/get/{id}", wrapper.GetUserGetId)
	m.HandleFunc("POST "+options.BaseURL+"/user/register", wrapper.PostUserRegister)
	m.HandleFunc("GET "+options.BaseURL+"/user/search", wrapper.GetUserSearch)

	return m
}
