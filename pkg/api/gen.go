//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BirthDate Дата рождения
type BirthDate = openapi_types.Date

// DialogMessage defines model for DialogMessage.
type DialogMessage struct {
	// From Идентификатор пользователя
	From UserId `json:"from"`

	// Text Текст сообщения
	Text DialogMessageText `json:"text"`

	// To Идентификатор пользователя
	To UserId `json:"to"`
}

// DialogMessageText Текст сообщения
type DialogMessageText = string

// Post Пост пользователя
type Post struct {
	// AuthorUserId Идентификатор пользователя
	AuthorUserId *UserId `json:"author_user_id,omitempty"`

	// Id Идентификатор поста
	Id *PostId `json:"id,omitempty"`

	// Text Текст поста
	Text *PostText `json:"text,omitempty"`
}

// PostId Идентификатор поста
type PostId = string

// PostText Текст поста
type PostText = string

// User defines model for User.
type User struct {
	// Biography Интересы
	Biography *string `json:"biography,omitempty"`

	// Birthdate Дата рождения
	Birthdate *BirthDate `json:"birthdate,omitempty"`

	// City Город
	City *string `json:"city,omitempty"`

	// FirstName Имя
	FirstName *string `json:"first_name,omitempty"`

	// Id Идентификатор пользователя
	Id *UserId `json:"id,omitempty"`

	// SecondName Фамилия
	SecondName *string `json:"second_name,omitempty"`
}

// UserId Идентификатор пользователя
type UserId = string

// N5xx defines model for 5xx.
type N5xx struct {
	// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
	Code *int `json:"code,omitempty"`

	// Message Описание ошибки
	Message string `json:"message"`

	// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
	RequestId *string `json:"request_id,omitempty"`
}

// PostDialogUserIdSendJSONBody defines parameters for PostDialogUserIdSend.
type PostDialogUserIdSendJSONBody struct {
	// Text Текст сообщения
	Text DialogMessageText `json:"text"`
}

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {
	// Id Идентификатор пользователя
	Id       *UserId `json:"id,omitempty"`
	Password *string `json:"password,omitempty"`
}

// PostPostCreateJSONBody defines parameters for PostPostCreate.
type PostPostCreateJSONBody struct {
	// Text Текст поста
	Text PostText `json:"text"`
}

// GetPostFeedParams defines parameters for GetPostFeed.
type GetPostFeedParams struct {
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *float32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// PutPostUpdateJSONBody defines parameters for PutPostUpdate.
type PutPostUpdateJSONBody struct {
	// Id Идентификатор поста
	Id PostId `json:"id"`

	// Text Текст поста
	Text PostText `json:"text"`
}

// PostUserRegisterJSONBody defines parameters for PostUserRegister.
type PostUserRegisterJSONBody struct {
	Biography *string `json:"biography,omitempty"`

	// Birthdate Дата рождения
	Birthdate  *BirthDate `json:"birthdate,omitempty"`
	City       *string    `json:"city,omitempty"`
	FirstName  *string    `json:"first_name,omitempty"`
	Password   *string    `json:"password,omitempty"`
	SecondName *string    `json:"second_name,omitempty"`
}

// GetUserSearchParams defines parameters for GetUserSearch.
type GetUserSearchParams struct {
	// FirstName Условие поиска по имени
	FirstName string `form:"first_name" json:"first_name"`

	// LastName Условие поиска по фамилии
	LastName string `form:"last_name" json:"last_name"`
}

// PostDialogUserIdSendJSONRequestBody defines body for PostDialogUserIdSend for application/json ContentType.
type PostDialogUserIdSendJSONRequestBody PostDialogUserIdSendJSONBody

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// PostPostCreateJSONRequestBody defines body for PostPostCreate for application/json ContentType.
type PostPostCreateJSONRequestBody PostPostCreateJSONBody

// PutPostUpdateJSONRequestBody defines body for PutPostUpdate for application/json ContentType.
type PutPostUpdateJSONRequestBody PutPostUpdateJSONBody

// PostUserRegisterJSONRequestBody defines body for PostUserRegister for application/json ContentType.
type PostUserRegisterJSONRequestBody PostUserRegisterJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dialog/{user_id}/list)
	GetDialogUserIdList(w http.ResponseWriter, r *http.Request, userId UserId)

	// (POST /dialog/{user_id}/send)
	PostDialogUserIdSend(w http.ResponseWriter, r *http.Request, userId UserId)

	// (PUT /friend/delete/{user_id})
	PutFriendDeleteUserId(w http.ResponseWriter, r *http.Request, userId UserId)

	// (PUT /friend/set/{user_id})
	PutFriendSetUserId(w http.ResponseWriter, r *http.Request, userId UserId)

	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)

	// (POST /post/create)
	PostPostCreate(w http.ResponseWriter, r *http.Request)

	// (PUT /post/delete/{id})
	PutPostDeleteId(w http.ResponseWriter, r *http.Request, id PostId)

	// (GET /post/feed)
	GetPostFeed(w http.ResponseWriter, r *http.Request, params GetPostFeedParams)

	// (GET /post/get/{id})
	GetPostGetId(w http.ResponseWriter, r *http.Request, id PostId)

	// (PUT /post/update)
	PutPostUpdate(w http.ResponseWriter, r *http.Request)

	// (GET /user/get/{id})
	GetUserGetId(w http.ResponseWriter, r *http.Request, id UserId)

	// (POST /user/register)
	PostUserRegister(w http.ResponseWriter, r *http.Request)

	// (GET /user/search)
	GetUserSearch(w http.ResponseWriter, r *http.Request, params GetUserSearchParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDialogUserIdList operation middleware
func (siw *ServerInterfaceWrapper) GetDialogUserIdList(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", r.PathValue("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDialogUserIdList(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostDialogUserIdSend operation middleware
func (siw *ServerInterfaceWrapper) PostDialogUserIdSend(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", r.PathValue("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDialogUserIdSend(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutFriendDeleteUserId operation middleware
func (siw *ServerInterfaceWrapper) PutFriendDeleteUserId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", r.PathValue("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutFriendDeleteUserId(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutFriendSetUserId operation middleware
func (siw *ServerInterfaceWrapper) PutFriendSetUserId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", r.PathValue("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutFriendSetUserId(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostPostCreate operation middleware
func (siw *ServerInterfaceWrapper) PostPostCreate(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPostCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutPostDeleteId operation middleware
func (siw *ServerInterfaceWrapper) PutPostDeleteId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id PostId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutPostDeleteId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPostFeed operation middleware
func (siw *ServerInterfaceWrapper) GetPostFeed(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostFeedParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostFeed(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPostGetId operation middleware
func (siw *ServerInterfaceWrapper) GetPostGetId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id PostId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostGetId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutPostUpdate operation middleware
func (siw *ServerInterfaceWrapper) PutPostUpdate(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutPostUpdate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserGetId operation middleware
func (siw *ServerInterfaceWrapper) GetUserGetId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserGetId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUserRegister operation middleware
func (siw *ServerInterfaceWrapper) PostUserRegister(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserSearch operation middleware
func (siw *ServerInterfaceWrapper) GetUserSearch(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserSearchParams

	// ------------- Required query parameter "first_name" -------------

	if paramValue := r.URL.Query().Get("first_name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "first_name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "first_name", r.URL.Query(), &params.FirstName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "first_name", Err: err})
		return
	}

	// ------------- Required query parameter "last_name" -------------

	if paramValue := r.URL.Query().Get("last_name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "last_name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "last_name", r.URL.Query(), &params.LastName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "last_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserSearch(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/dialog/{user_id}/list", wrapper.GetDialogUserIdList)
	m.HandleFunc("POST "+options.BaseURL+"/dialog/{user_id}/send", wrapper.PostDialogUserIdSend)
	m.HandleFunc("PUT "+options.BaseURL+"/friend/delete/{user_id}", wrapper.PutFriendDeleteUserId)
	m.HandleFunc("PUT "+options.BaseURL+"/friend/set/{user_id}", wrapper.PutFriendSetUserId)
	m.HandleFunc("POST "+options.BaseURL+"/login", wrapper.PostLogin)
	m.HandleFunc("POST "+options.BaseURL+"/post/create", wrapper.PostPostCreate)
	m.HandleFunc("PUT "+options.BaseURL+"/post/delete/{id}", wrapper.PutPostDeleteId)
	m.HandleFunc("GET "+options.BaseURL+"/post/feed", wrapper.GetPostFeed)
	m.HandleFunc("GET "+options.BaseURL+"/post/get/{id}", wrapper.GetPostGetId)
	m.HandleFunc("PUT "+options.BaseURL+"/post/update", wrapper.PutPostUpdate)
	m.HandleFunc("GET "+options.BaseURL+"/user/get/{id}", wrapper.GetUserGetId)
	m.HandleFunc("POST "+options.BaseURL+"/user/register", wrapper.PostUserRegister)
	m.HandleFunc("GET "+options.BaseURL+"/user/search", wrapper.GetUserSearch)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
