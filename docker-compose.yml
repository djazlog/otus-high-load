services:

  # Citus coordinator
  master:
    image: "citusdata/citus:12.1.3"
    container_name: "${COMPOSE_PROJECT_NAME:-citus}_master"
    labels: ["com.citusdata.role=Master"]
    environment: &AUTH
      POSTGRES_USER: ${POSTGRES_USER:-otus}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-otus}
      POSTGRES_DB: ${POSTGRES_DB:-otus}
      PGUSER: "${POSTGRES_USER:-otus}"
      PGPASSWORD: "${POSTGRES_PASSWORD:-otus}"
      POSTGRES_HOST_AUTH_METHOD: "${POSTGRES_HOST_AUTH_METHOD:-trust}"
    command: ["postgres", "-c", "shared_preload_libraries=citus"]
    volumes:
      - ./volumes/citus-coordinator:/var/lib/postgresql/data
      #- ./docs/postgresql/init-master.sh:/docker-entrypoint-initdb.d/init-master.sh
    ports:
      - "5432:5432"
    networks:
      - otus-net

  #postgres-slave:
  #  image: postgres:16-alpine
  #  container_name: postgres-slave
  #restart: unless-stopped
  #  environment:
  #    POSTGRES_USER: ${POSTGRES_REPLICA_USER:-replicator}
  #    POSTGRES_PASSWORD: ${POSTGRES_REPLICA_PASSWORD:-pass}
  #    POSTGRES_DB: ${POSTGRES_DB:-otus}
  #  volumes:
  #    - ./volumes/slave-data:/var/lib/postgresql/data
  #    - ./docs/postgresql/init-slave.sh:/docker-entrypoint-initdb.d/init-slave.sh
  #  ports:
  #    - "65432:5432"
  #  networks:
  #    - otus-net
  #  depends_on:
  #    - master

  # Citus workers
  worker:
    image: "citusdata/citus:12.1.3"
    labels: ["com.citusdata.role=Worker"]
    depends_on: [master]
    environment: *AUTH
    command: "/wait-for-manager.sh"
    volumes:
      - healthcheck-volume:/healthcheck
    networks:
      - otus-net

  manager:
    container_name: "${COMPOSE_PROJECT_NAME:-citus}_manager"
    image: "citusdata/membership-manager:0.3.0"
    volumes:
      - "${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock"
      - healthcheck-volume:/healthcheck
    depends_on: [master]
    environment: *AUTH
    networks:
      - otus-net


  prometheus:
    image: prom/prometheus:latest
    container_name: monitoring_prometheus
    restart: unless-stopped
    volumes:
      - ./docs/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docs/prometheus/config/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    ports:
      - 9090:9090
    expose:
      - 9090
    links:
      - cadvisor:cadvisor
      - node-exporter:node-exporter
    networks:
      - otus-net

  node-exporter:
    image: prom/node-exporter:latest
    container_name: monitoring_node_exporter
    restart: unless-stopped
    ports:
      - 9100:9100
    expose:
      - 9100
    networks:
      - otus-net

  cadvisor:
    image: bitnami/cadvisor:latest
    platform: linux/arm64
    container_name: monitoring_cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
      - /var/lib/docker/:/var/lib/docker:ro
    expose:
      - 8080
    ports:
      - 8080:8080
    networks:
      - otus-net

  grafana:
    image: grafana/grafana:latest
    container_name: monitoring_grafana
    restart: unless-stopped
    links:
      - prometheus:prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=pass
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - otus-net
  redis:
    image: redis:8.2-alpine
    container_name: redis-container
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - otus-net

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq-container
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - otus-net

volumes:
  prometheus_data:
  grafana_data:
  redis-data:
  rabbitmq-data:
  healthcheck-volume:
  postgres-replica:

networks:
  otus-net:
    driver: bridge
